package main

import (
	"context"
	"errors"
	"time"

	"github.com/connctd/restapi-go"
)

const (
	randomComponentId = "random"
	randomPropertyId  = "value"
)

// buildThing returns a thing that can be registered with the connctd platform.
// Note that the thing ID is generated by connctd and returned when the thing is created.
// The connctd platform will store all information regarding the thing.
// The connector therefore should only store its ID.
func buildThing() restapi.Thing {
	return restapi.Thing{
		Name:            "Giphy",
		Manufacturer:    "IoT connctd GmbH",
		DisplayType:     "core.SENSOR",
		MainComponentID: randomComponentId,
		Status:          "AVAILABLE",
		Attributes:      []restapi.ThingAttribute{},
		Components: []restapi.Component{
			{
				ID:            randomComponentId,
				Name:          "Giphy random component",
				ComponentType: "core.Sensor",
				Capabilities: []string{
					"core.MEASURE",
				},
				Properties: []restapi.Property{
					{
						ID:    randomPropertyId,
						Name:  "Giphy random component",
						Value: "",
						Type:  restapi.ValueTypeString,
					},
				},
				Actions: []restapi.Action{},
			},
		},
	}
}

// CreateThing can be called by the connector to register a new thing for the given instance.
// It retrieves the instance token from the database and uses the token to create a new thing via the connctd API client.
// The new thing ID is then stored in the database referencing the instance id.
func (g *GiphyConnector) CreateThing(ctx context.Context, instanceId string) error {
	instance, err := g.db.GetInstance(ctx, instanceId)
	if err != nil {
		g.logger.WithField("instanceId", instanceId).WithError(err).Error("failed to retrieve instance from database")
		return err
	}

	thing := buildThing()
	createdThing, err := g.connctdClient.CreateThing(ctx, instance.Token, thing)
	if err != nil {
		g.logger.WithField("thing", thing).WithError(err).Error("failed to register new Thing")
		return err
	}

	err = g.db.AddThingID(ctx, instanceId, createdThing.ID)
	if err != nil {
		g.logger.WithField("thing", thing).WithError(err).Error("failed to insert new Thing into database")
		return err
	}

	g.logger.WithField("thing", createdThing).Info("Created new thing")

	return nil
}

// UpdateProperty can be called by the connector to update the random property of an thing belonging to an instance.
func (g *GiphyConnector) UpdateProperty(ctx context.Context, instanceId string, value string) error {
	instance, err := g.db.GetInstance(ctx, instanceId)
	if err != nil {
		g.logger.WithField("instanceId", instanceId).WithError(err).Error("failed to retrieve instance")
		return err
	}
	if instance.ThingID == "" {
		g.logger.WithField("instanceId", instanceId).Error("Thing id not set")
		return errors.New("thing id not set")
	}

	timestamp := time.Now()

	err = g.connctdClient.UpdateThingPropertyValue(ctx, instance.Token, instance.ThingID, randomComponentId, randomPropertyId, value, timestamp)

	return err
}
